/* Side notes for calling out things
-------------------------------------------------- */
/* Base styles (regardless of theme) */

.bs-callout {
    margin: 20px 0;
    padding: 15px 30px 15px 15px;
    border: 0px;
    border-top: 1px solid #eee;
    border-left: 5px solid #eee;
}

.bs-callout h4 {
    margin-top: 0;
}

.bs-callout p:last-child {
    margin-bottom: 0;
}

.bs-callout code,
.bs-callout .highlight {
    background-color: #fff;
}
/* Themes for different contexts */

.bs-callout-danger {
    background-color: #fcf2f2;
    border-color: #dFb5b4;
}

.bs-callout-warning {
    background-color: #fefbed;
    border-color: #f1e7bc;
}

.bs-callout-info {
    background-color: #f0f7fd;
    border-color: #d0e3f0;
}

.bs-callout-bionic {
    background-color: #EAEBEC;
    border-color: #0088DB;
}

0088DB
/**
        



 * For the correct positioning of the placeholder element, the dnd-list and
 * it's children must have position: relative
 */

.mcAdvert ul[dnd-list],
.mcAdvert ul[dnd-list] > li {
    position: relative;
}
/**
 * The dnd-list should always have a min-height,
 * otherwise you can't drop to it once it's empty
 */

.mcAdvert ul[dnd-list] {
    min-height: 42px;
    padding-left: 0px;
}
/**
 * The dndDraggingSource class will be applied to
 * the source element of a drag operation. It makes
 * sense to hide it to give the user the feeling
 * that he's actually moving it.
 */

.mcAdvert ul[dnd-list] .dndDraggingSource {
    display: none;
}
/**
 * An element with .dndPlaceholder class will be
 * added to the dnd-list while the user is dragging
 * over it.
 */

.mcAdvert ul[dnd-list] .dndPlaceholder {
    display: block;
    background-color: #eee;
    min-height: 42px;
    border-style: dashed;
    border-color: #ccc;
    border-radius: 4px;
    border-width: medium;
}
/**
 * The dnd-lists's child elements currently MUST have
 * position: relative. Otherwise we can not determine
 * whether the mouse pointer is in the upper or lower
 * half of the element we are dragging over. In other
 * browsers we can use event.offsetY for this.
 */

.mcAdvert ul[dnd-list] li {
    background-color: #fff;
    border: 1px solid #ddd;
    border-top-right-radius: 4px;
    border-top-left-radius: 4px;
    display: block;
    padding: 10px 15px;
    margin-bottom: -1px;
}
/**
 * Show selected elements in green
 */

.mcAdvert ul[dnd-list] li.selected {
    background-color: #eee;
    color: #eee -50;
}

.padding-off {
    padding: 0;
}

.nopadding {
    padding: 0 !important;
    margin: 0 !important;
}

.nopaddingTop {
    padding-top: 0px !important;
}

.bionic_color {
    /*    background-color:#EAEBEC;*/
    
    color: #0088DB;
    background-color: #0088DB;
}

#navbar {
    margin-top: 10px;
}

.container {
    margin-top: 20px;
}

.collapsable {
    display: inline-block;
    overflow: hidden;
    height: 0;
    transition: height 1s;
    -webkit-transition: height 1s;
    -moz-transition: height 1s;
    -o-transition: height 1s;
}

.collapsable.showMe {
    height: 100px;
}

.animate-enter,
.animate-leave {
    -webkit-transition: height 1s;
    -moz-transition: height 1s;
    -o-transition: height 1s;
    transition: height 1s;
    position: relative;
    display: block;
}

.animate-enter.animate-enter-active,
.animate-leave {
    opacity: 1;
    top: 0;
    height: 30px;
}

.animate-leave.animate-leave-active,
.animate-enter {
    opacity: 0;
    top: -50px;
    height: 0px;
}
/*
#overlay {
    position: absolute;
    color:red;
    z-index: 1;
}

.overlay {
        opacity:0;
    filter: alpha(opacity = 0);
    position:absolute;
    top:0; bottom:0; left:0; right:0;
    display:block;
    z-index:2;
    background:transparent;
}
*/
/*
*[role="button"] {
   style these a buttons w/o relying on a .button class 
}*/